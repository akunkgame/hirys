import __buffer_polyfill from 'vite-plugin-node-polyfills/shims/buffer'
globalThis.Buffer = globalThis.Buffer || __buffer_polyfill
import __global_polyfill from 'vite-plugin-node-polyfills/shims/global'
globalThis.global = globalThis.global || __global_polyfill
import __process_polyfill from 'vite-plugin-node-polyfills/shims/process'
globalThis.process = globalThis.process || __process_polyfill

import {
  BigNumber,
  bignumber_default
} from "./chunk-UWOFMTFC.js";
import "./chunk-D57Y2HJE.js";
import {
  __toESM,
  require_dist,
  require_dist2,
  require_dist3
} from "./chunk-4RDJM6KU.js";

// node_modules/@irys/web-upload-ethereum-ethers-v6/dist/esm/index.js
var import_dist7 = __toESM(require_dist());
var import_dist8 = __toESM(require_dist2());
var import_dist9 = __toESM(require_dist3());

// node_modules/@irys/web-upload-ethereum-ethers-v6/dist/esm/irys.js
var import_dist4 = __toESM(require_dist(), 1);
var import_dist5 = __toESM(require_dist2(), 1);
var import_dist6 = __toESM(require_dist3(), 1);

// node_modules/@irys/web-upload-ethereum-ethers-v6/dist/esm/adapter.js
var import_dist = __toESM(require_dist(), 1);
var import_dist2 = __toESM(require_dist2(), 1);
var import_dist3 = __toESM(require_dist3(), 1);
var getV6Adapter = (base) => {
  return class EthereumEthersV6 extends base {
    async createTx(amount, to, _fee) {
      const signer = this.w3signer;
      const tx = {
        to,
        from: this.address,
        value: amount.toString(),
        gasLimit: BigInt(0)
      };
      const estimatedGas = await this.provider.estimateGas(tx);
      tx.gasLimit = estimatedGas;
      const txr = await signer.populateTransaction(tx);
      return { tx: txr, txId: void 0 };
    }
    async getTx(txId) {
      const provider = this.provider;
      const response = await provider.getTransaction(txId);
      if (!response)
        throw new Error("Tx doesn't exist");
      if (!response.to)
        throw new Error(`Unable to resolve transactions ${txId} receiver`);
      return {
        from: response.from,
        to: response.to,
        blockHeight: response.blockNumber ? new bignumber_default(response.blockNumber) : void 0,
        amount: new bignumber_default(response.value.toString()),
        pending: response.blockNumber ? false : true,
        confirmed: await response.confirmations() >= this.minConfirm
      };
    }
    async getFee(amount, to) {
      const provider = this.providerInstance;
      const tx = {
        to,
        from: this.address,
        value: "0x" + new bignumber_default(amount).toString(16)
      };
      const estimatedGas = await provider.estimateGas(tx);
      const gasPrice = await provider.getGasPrice();
      return new bignumber_default(gasPrice.mul(estimatedGas).toString());
    }
    async ready() {
      const provider = this.wallet;
      this.provider = provider;
      const signer = await provider.getSigner();
      signer._signTypedData = async (domain, types, value) => signer.signTypedData(domain, types, value);
      provider.getSigner = () => signer;
      this.wallet = provider;
      provider.getGasPrice = async () => provider.getFeeData().then((r) => BigNumber.from(r.gasPrice ?? 0));
      this.providerInstance = provider;
      await super.ready();
    }
  };
};

// node_modules/@irys/web-upload-ethereum-ethers-v6/dist/esm/irys.js
function EthersV6Adapter(provider) {
  return {
    phase: "pre",
    adaptTokenPre(builder, tokenConfig) {
      builder.withProvider(provider);
      builder.token = getV6Adapter(tokenConfig);
    }
  };
}

// node_modules/@irys/web-upload-ethereum-ethers-v6/dist/esm/index.js
var esm_default = EthersV6Adapter;
export {
  EthersV6Adapter,
  esm_default as default
};
//# sourceMappingURL=@irys_web-upload-ethereum-ethers-v6.js.map
