{
  "version": 3,
  "sources": ["../../@irys/web-upload-ethereum-ethers-v6/src/index.ts", "../../@irys/web-upload-ethereum-ethers-v6/src/irys.ts", "../../@irys/web-upload-ethereum-ethers-v6/src/adapter.ts"],
  "sourcesContent": ["import { EthersV6Adapter } from './irys';\nexport { EthersV6Adapter };\nexport default EthersV6Adapter;\n", "import type EthereumConfig from '@irys/web-upload-ethereum/ethereum';\nimport { getV6Adapter } from './adapter';\nimport { type Adapter } from '@irys/web-upload/builder';\n\nexport function EthersV6Adapter(provider: any): Adapter {\n  return {\n    phase: 'pre',\n    adaptTokenPre(builder, tokenConfig) {\n      builder.withProvider(provider);\n      // todo: add validation here\n      builder.token = getV6Adapter(\n        tokenConfig as { new (...args: any): EthereumConfig }\n      );\n    },\n  };\n}\n", "import type { InjectedTypedEthereumSignerMinimalSigner } from '@irys/bundles/web';\nimport BigNumber from 'bignumber.js';\nimport { BigNumber as EthBigNumber } from '@ethersproject/bignumber';\nimport type { BrowserProvider, JsonRpcSigner, TypedDataDomain } from 'ethers';\nimport type { Tx } from '@irys/upload-core';\nimport {\n  EthereumConfig,\n  type MinimalProvider,\n} from '@irys/web-upload-ethereum/ethereum';\n\nexport const getV6Adapter = (base: {\n  new (...args: any): EthereumConfig;\n}): { new (...args: any): EthereumConfig } => {\n  return class EthereumEthersV6 extends base {\n    protected declare provider: BrowserProvider;\n\n    public async createTx(\n      amount: BigNumber.Value,\n      to: string,\n      _fee?: string | undefined\n    ): Promise<{ txId: string | undefined; tx: any }> {\n      const signer = this.w3signer as any as JsonRpcSigner;\n      const tx = {\n        to,\n        from: this.address,\n        value: amount.toString(),\n        gasLimit: BigInt(0),\n      };\n      const estimatedGas = await this.provider.estimateGas(tx);\n      tx.gasLimit = estimatedGas;\n      const txr = await signer.populateTransaction(tx);\n      return { tx: txr, txId: undefined };\n    }\n\n    public async getTx(txId: string): Promise<Tx> {\n      const provider = this.provider;\n      const response = await provider.getTransaction(txId);\n\n      if (!response) throw new Error(\"Tx doesn't exist\");\n      if (!response.to)\n        throw new Error(`Unable to resolve transactions ${txId} receiver`);\n\n      return {\n        from: response.from,\n        to: response.to,\n        blockHeight: response.blockNumber\n          ? new BigNumber(response.blockNumber)\n          : undefined,\n        amount: new BigNumber(response.value.toString()),\n        pending: response.blockNumber ? false : true,\n        confirmed: (await response.confirmations()) >= this.minConfirm,\n      };\n    }\n\n    async getFee(amount: BigNumber.Value, to?: string): Promise<BigNumber> {\n      const provider = this.providerInstance;\n      const tx = {\n        to,\n        from: this.address,\n        value: '0x' + new BigNumber(amount).toString(16),\n      };\n\n      const estimatedGas = await provider.estimateGas(tx);\n      const gasPrice = await provider.getGasPrice();\n      return new BigNumber(gasPrice.mul(estimatedGas).toString());\n    }\n\n    public async ready(): Promise<void> {\n      const provider = this.wallet as any as BrowserProvider;\n      this.provider = provider;\n      const signer = await provider.getSigner();\n      (\n        signer as unknown as InjectedTypedEthereumSignerMinimalSigner\n      )._signTypedData = async (domain, types, value): Promise<string> =>\n        signer.signTypedData(domain as TypedDataDomain, types, value);\n      // @ts-expect-error fix\n      provider.getSigner = (): JsonRpcSigner => signer;\n      // @ts-expect-error fix\n      this.wallet = provider;\n      (provider as unknown as MinimalProvider).getGasPrice =\n        async (): Promise<EthBigNumber> =>\n          provider.getFeeData().then((r) => EthBigNumber.from(r.gasPrice ?? 0));\n      // @ts-expect-error fix\n      this.providerInstance = provider;\n      await super.ready();\n    }\n  };\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA,IAAAA,eAAA;IAAAA,eAAA;IAAAA,eAAA;;;ACCA,IAAAC,eAAA;IAAAA,eAAA;IAAAA,eAAA;;;ACAA;IAAAC,eAAA;IAAAA,eAAA;AASO,IAAM,eAAe,CAAC,SAEgB;AAC3C,SAAO,MAAM,yBAAyB,KAAI;IAGjC,MAAM,SACX,QACA,IACA,MAAyB;AAEzB,YAAM,SAAS,KAAK;AACpB,YAAM,KAAK;QACT;QACA,MAAM,KAAK;QACX,OAAO,OAAO,SAAQ;QACtB,UAAU,OAAO,CAAC;;AAEpB,YAAM,eAAe,MAAM,KAAK,SAAS,YAAY,EAAE;AACvD,SAAG,WAAW;AACd,YAAM,MAAM,MAAM,OAAO,oBAAoB,EAAE;AAC/C,aAAO,EAAE,IAAI,KAAK,MAAM,OAAS;IACnC;IAEO,MAAM,MAAM,MAAY;AAC7B,YAAM,WAAW,KAAK;AACtB,YAAM,WAAW,MAAM,SAAS,eAAe,IAAI;AAEnD,UAAI,CAAC;AAAU,cAAM,IAAI,MAAM,kBAAkB;AACjD,UAAI,CAAC,SAAS;AACZ,cAAM,IAAI,MAAM,kCAAkC,IAAI,WAAW;AAEnE,aAAO;QACL,MAAM,SAAS;QACf,IAAI,SAAS;QACb,aAAa,SAAS,cAClB,IAAI,kBAAU,SAAS,WAAW,IAClC;QACJ,QAAQ,IAAI,kBAAU,SAAS,MAAM,SAAQ,CAAE;QAC/C,SAAS,SAAS,cAAc,QAAQ;QACxC,WAAY,MAAM,SAAS,cAAa,KAAO,KAAK;;IAExD;IAEA,MAAM,OAAO,QAAyB,IAAW;AAC/C,YAAM,WAAW,KAAK;AACtB,YAAM,KAAK;QACT;QACA,MAAM,KAAK;QACX,OAAO,OAAO,IAAI,kBAAU,MAAM,EAAE,SAAS,EAAE;;AAGjD,YAAM,eAAe,MAAM,SAAS,YAAY,EAAE;AAClD,YAAM,WAAW,MAAM,SAAS,YAAW;AAC3C,aAAO,IAAI,kBAAU,SAAS,IAAI,YAAY,EAAE,SAAQ,CAAE;IAC5D;IAEO,MAAM,QAAK;AAChB,YAAM,WAAW,KAAK;AACtB,WAAK,WAAW;AAChB,YAAM,SAAS,MAAM,SAAS,UAAS;AAErC,aACA,iBAAiB,OAAO,QAAQ,OAAO,UACvC,OAAO,cAAc,QAA2B,OAAO,KAAK;AAE9D,eAAS,YAAY,MAAqB;AAE1C,WAAK,SAAS;AACb,eAAwC,cACvC,YACE,SAAS,WAAU,EAAG,KAAK,CAAC,MAAM,UAAa,KAAK,EAAE,YAAY,CAAC,CAAC;AAExE,WAAK,mBAAmB;AACxB,YAAM,MAAM,MAAK;IACnB;;AAEJ;;;ADnFM,SAAU,gBAAgB,UAAa;AAC3C,SAAO;IACL,OAAO;IACP,cAAc,SAAS,aAAW;AAChC,cAAQ,aAAa,QAAQ;AAE7B,cAAQ,QAAQ,aACd,WAAqD;IAEzD;;AAEJ;;;ADbA,IAAA,cAAe;",
  "names": ["import_dist", "import_dist", "import_dist"]
}
